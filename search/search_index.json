{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SSE Documentation What is SSE? Symmetric Searchable Encryption (SSE) is one of the modern cryptographic approaches that allows users to efficiently search over a collection of encrypted files without compromising the original data security. A concrete application for SSE SSE is applied in Advanced Secure Cloud Encrypted Platform for Internationally Orchestrated Solutions (ASCLEPIOS) to build a cloud-based eHealth framework that protects users\u2019 privacy and prevents both internal and external attacks. ASCLEPIOS is to maximize and fortify the trust of users on cloud-based healthcare services by developing mechanisms for protecting both corporate and personal sensitive data. For full project details visit asclepios-project.eu . About this documentation The primary aim of this documentation is to serve as a point of reference for users who would like to use SSE mechanism. These include Algorithms , Implementation , Deployment , Testing and Others . Please navigate the site using the available navigation bars.","title":"Home"},{"location":"#sse-documentation","text":"","title":"SSE Documentation"},{"location":"#what-is-sse","text":"Symmetric Searchable Encryption (SSE) is one of the modern cryptographic approaches that allows users to efficiently search over a collection of encrypted files without compromising the original data security.","title":"What is SSE?"},{"location":"#a-concrete-application-for-sse","text":"SSE is applied in Advanced Secure Cloud Encrypted Platform for Internationally Orchestrated Solutions (ASCLEPIOS) to build a cloud-based eHealth framework that protects users\u2019 privacy and prevents both internal and external attacks. ASCLEPIOS is to maximize and fortify the trust of users on cloud-based healthcare services by developing mechanisms for protecting both corporate and personal sensitive data. For full project details visit asclepios-project.eu .","title":"A concrete application for SSE"},{"location":"#about-this-documentation","text":"The primary aim of this documentation is to serve as a point of reference for users who would like to use SSE mechanism. These include Algorithms , Implementation , Deployment , Testing and Others . Please navigate the site using the available navigation bars.","title":"About this documentation"},{"location":"start/","text":"Getting Started With SSE Whether you want to understand the SSE algorithm, check the implementations of SSE components, or deploy a simple SSE demo, there are some simple steps to getting started with the SSE scheme. See the list below: Algorithms Implementation Deployment Testing Others","title":"Getting Started"},{"location":"start/#getting-started-with-sse","text":"Whether you want to understand the SSE algorithm, check the implementations of SSE components, or deploy a simple SSE demo, there are some simple steps to getting started with the SSE scheme. See the list below: Algorithms Implementation Deployment Testing Others","title":"Getting Started With SSE"},{"location":"start/Algorithms/","text":"Attribute-Based Symmetric Searchable Encryption SSE is an encryption technique that allows users to search directly on their outsourced encrypted data while preserving the privacy of both the files and the queries. Unfortunately, the majority SSE schemes allow users to either decrypt the whole ciphertext or nothing at all. In our SSE scheme, we proposed a new SSE approach based on Attributed-Based Encryption which satisfies Forward Privacy. Therefore, our SSE scheme supports the clients to decrypt parts of encrypted documents without compromising the original data security. Besides, our SSE approach has better performance and more efficience compared with its courterparts. The details such as Formal Construction of SSE, Forward Privacy, Security Analysis, etc., can be reached in Attribute-Based Symmetric Searchable Encryption .","title":"Algorithms"},{"location":"start/Algorithms/#attribute-based-symmetric-searchable-encryption","text":"SSE is an encryption technique that allows users to search directly on their outsourced encrypted data while preserving the privacy of both the files and the queries. Unfortunately, the majority SSE schemes allow users to either decrypt the whole ciphertext or nothing at all. In our SSE scheme, we proposed a new SSE approach based on Attributed-Based Encryption which satisfies Forward Privacy. Therefore, our SSE scheme supports the clients to decrypt parts of encrypted documents without compromising the original data security. Besides, our SSE approach has better performance and more efficience compared with its courterparts. The details such as Formal Construction of SSE, Forward Privacy, Security Analysis, etc., can be reached in Attribute-Based Symmetric Searchable Encryption .","title":"Attribute-Based Symmetric Searchable Encryption"},{"location":"start/Deployment/","text":"SSE Deployment SSE service could be deployed by both docker-compose and MiCADO. Deployment SSE service with docker-compose It is possible to deploy all the SSE components on a single host using docker-compose. The following part describes how to do that. 0. Preliminaries 0.1 Create an instance from either AWS or Azure For instance, you could select Instance Image & Instance Type as \"Ubuntu Server 20.04 LTS\" and \"t2.micro\" on AWS respectively. 0.2 docker installation SSH to the instance that you created in #0.1 and execute the following commands to install docker. 1. sudo apt-get update 2. sudo apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common 3. curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - 4. sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" 5. sudo apt update 6. sudo apt install docker-ce docker-ce-cli containerd.io 7. sudo systemctl status docker 0.3 docker-compose installation SSH to the instance that you created in #0.1 and execute the following commands to install docker-compose. Install the old version of docker-compose: 1. sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose 2. sudo chmod +x /usr/local/bin/docker-compose 3. docker-compose --version Install the up-to-date version of docker compose: 1. mkdir -p ~/.docker/cli-plugins/ 2. curl -SL https://github.com/docker/compose/releases/download/v2.3.3/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose 3. chmod +x ~/.docker/cli-plugins/docker-compose 4. sudo chown $USER /var/run/docker.sock 5. docker compose version Note that you could install any docker-compose version. The following part of this chapter uses the old docker-compose version. If you install the up-to-date version, few following commands may slightly different, such as docker compose up -d instead of docker-compose up -d . 0.4 DNS (Optional) If you would like to deploy a TLS layer in SSE service, you must set up DNS. For instance, you will achieve a public ip address (i.e. 18.134.94.206) once you finish #0.1. Then, go to digitalocean and bind your domain name with the public ip address. 1. Get the docker-compose definition from the repository git clone https://gitlab.com/asclepios-project/sse-deployment Two docker-compose files could be achieved, namely \"docker-compose-without-tls.yml\" and \"docker-compose-tls.yml\". The \"docker-compose-without-tls.yml\" file involves the definitions of the SSE server, SSE TA, SSE client, MinIO Server, and TEEP deployer server. While, the \"docker-compose-tls.yml\" file involves the definitions of the SSE server, SSE TA, SSE client, certbot, ta-proxy (Nginx), MinIO Server, and TEEP deployer server. If you do not need to use SGX for SSE TA, and/or use MinIO Server, you can customize the docker-compose file by removing teep-server and/or minio definitions. The main difference between these two files is that \"docker-compose-tls.yml\" adds a TLS layer in order to increase security level on SSE TA. 2. Configure the environmental variables cd sse-deployment If using SGX at SSE TA: cp template_sgx.env .env If not using SGX at SSE TA: cp template_nonsgx.env .env Edit the .env file to modify the configurations and more details could be found in SSE_deployment_manual . 2.1 For speed up the environmental variables configuration, you can do the following. 2.1.1 If you don't want to create a TLS layer for SSE service, then do the following steps. nano example-without-tls.env Then, change the following variables to your own environmental variables. TA_ALLOWED_HOSTS=\"YOUR_INSTANCE_PUBLIC_IP_ADDRESS ta\" SSE_SERVER_ALLOWED_HOSTS=\"YOUR_INSTANCE_PUBLIC_IP_ADDRESS sse\" MINIO_URL=YOUR_INSTANCE_PUBLIC_IP_ADDRESS:9000 SSE_CLIENT_ALLOWED_HOSTS=\"YOUR_INSTANCE_PUBLIC_IP_ADDRESS client\" SSE_CLIENT_TA_URL=http://YOUR_INSTANCE_PUBLIC_IP_ADDRESS:8000 SSE_CLIENT_SSE_URL=http://YOUR_INSTANCE_PUBLIC_IP_ADDRESS:8080 SSE_CLIENT_CP_ABE_URL=http://YOUR_INSTANCE_PUBLIC_IP_ADDRESS:8084 Once it's finished, execute the following command. mv example-without-tls.env .env 2.1.2 If you want to create a TLS layer for SSE servic, do the following steps. nano example-with-tls.env Then, change the following variables to your own environmental variables. TA_ALLOWED_HOSTS=\"YOUR_DOMAIN_NAME ta\" SSE_SERVER_ALLOWED_HOSTS=\"YOUR_INSTANCE_PUBLIC_IP_ADDRESS sse\" SSE_SERVER_TA_SERVER=https://YOUR_DOMAIN_NAME:443 MINIO_URL=YOUR_INSTANCE_PUBLIC_IP_ADDRESS:9000 SSE_CLIENT_ALLOWED_HOSTS=\"YOUR_INSTANCE_PUBLIC_IP_ADDRESS client\" SSE_CLIENT_TA_URL=https://YOUR_DOMAIN_NAME:443 SSE_CLIENT_SSE_URL=http://YOUR_INSTANCE_PUBLIC_IP_ADDRESS:8080 SSE_CLIENT_CP_ABE_URL=http://YOUR_INSTANCE_PUBLIC_IP_ADDRESS:8084 Once it's finished, execute the following command. mv example-with-tls.env .env 3. Build the docker images sudo docker-compose build If you just would like to deploy the SSE service, you can skip this part -\"Build the docker images\". The following part will describe how to run SSE service with \"docker-compose-without-tls.yml\" (#4.1) and \"docker-compose-tls.yml\" (#4.2) separately. 4.1 Run SSE service with docker-compose-without-tls.yml Rename \"docker-compose-without-tls.yml\" to \"docker-compose.yml\" mv docker-compose-without-tls.yml docker-compose.yml Then, start the SSE service. docker-compose up 4.2 Run SSE service with docker-compose-tls.yml 4.2.1 Update the certbot entry in \u2018docker-compose-tls.yml\u2019 with email and domain First, edit \u2018docker-compose-tls.yml\u2019 with your favourite editor nano docker-compose-tls.yml Scroll down to certbot and modify the --email and -d parameters. Save the file. --email YOUR_EMAIL_ADDRESS -d YOUR_DOMAIN_NAME Rename \u2018docker-compose-tls.yml\u2019 to \u2018docker-compose.yml\u2019 mv docker-compose-tls.yml docker-compose.yml 4.2.2 Update the 'nginx.http' file with the domain name nano nginx.http server_name YOUR_DOMAIN_NAME Rename \u2018nginx.http\u2019 to \u2018nginx.conf\u2019 mv nginx.http nginx.conf 4.2.3 Run the SSE service sudo docker-compose up -d 4.2.4 Update the \u2018nginx.https\u2019 file with the domain name nano nginx.https server_name YOUR_DOMAIN_NAME /etc/letsencrypt/live/YOUR_DOMAIN_NAME/fullchain.pem; /etc/letsencrypt/live/YOUR_DOMAIN_NAME/privkey.pem; Rename \u2018nginx.conf\u2019 to \u2018nginx.http\u2019 mv nginx.conf nginx.http Rename \u2018nginx.https\u2019 to \u2018nginx.conf\u2019 mv nginx.https nginx.conf 4.2.5 Restart the Nginx service docker-compose restart ta-proxy P.S. If you deploy all the SSE components on a single host, you will need to change SSE client port number (in docker-compose-tls.yml) from (-80:80) to (-81:80) in order to avoid port conflicts with ta-proxy container. Deployment SSE service using MiCADO 0. Preliminaries 0.1 MiCADO installation The details of MiCADO installation can be found in MiCADO installation . One additional step is required to support deployment of the SSE scheme: \u2018cert-manager.yaml\u2019 and \u2018traefik-rbac.yaml\u2019 need to be installed on the MiCADO master before the deployment. (1) SSH to MiCADO master node. (2) Copy \u2018cert-manager.yaml\u2019 and \u2018traefik-rbac.yaml\u2019 files to any directory in MiCADO master node. (3) Run the commands below. sudo kubectl apply -f cert-manager.yaml sudo kubectl apply -f traefik-rbac.yaml 1. Deployment using MiCADO Four ADT templates (below) could be found in sse-deployment . Template_SSE_without_TLS_AWS.yaml Template_SSE_without_TLS_Azure.yaml Template_SSE_with_TLS_AWS.yaml Template_SSE_with_TLS_Azure.yaml The next step is to configure the ADT file and then run the command on Ansible Remote machine to deploy the SSE service (Some tutorials of how to deploy applications on MiCADO could be find in Tutorials ). For further details, you can also read about the SSE service deployment in SSE_deployment_manual . P.S. The SSE ADT examples and SSE service test reports could be found in the \"ADT examples\" folder of sse-deployment .","title":"Deployment"},{"location":"start/Deployment/#sse-deployment","text":"SSE service could be deployed by both docker-compose and MiCADO.","title":"SSE Deployment"},{"location":"start/Deployment/#deployment-sse-service-with-docker-compose","text":"It is possible to deploy all the SSE components on a single host using docker-compose. The following part describes how to do that.","title":"Deployment SSE service with docker-compose"},{"location":"start/Deployment/#0-preliminaries","text":"","title":"0. Preliminaries"},{"location":"start/Deployment/#01-create-an-instance-from-either-aws-or-azure","text":"For instance, you could select Instance Image & Instance Type as \"Ubuntu Server 20.04 LTS\" and \"t2.micro\" on AWS respectively.","title":"0.1 Create an instance from either AWS or Azure"},{"location":"start/Deployment/#02-docker-installation","text":"SSH to the instance that you created in #0.1 and execute the following commands to install docker. 1. sudo apt-get update 2. sudo apt install apt-transport-https ca-certificates curl gnupg-agent software-properties-common 3. curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - 4. sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" 5. sudo apt update 6. sudo apt install docker-ce docker-ce-cli containerd.io 7. sudo systemctl status docker","title":"0.2 docker installation"},{"location":"start/Deployment/#03-docker-compose-installation","text":"SSH to the instance that you created in #0.1 and execute the following commands to install docker-compose. Install the old version of docker-compose: 1. sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose 2. sudo chmod +x /usr/local/bin/docker-compose 3. docker-compose --version Install the up-to-date version of docker compose: 1. mkdir -p ~/.docker/cli-plugins/ 2. curl -SL https://github.com/docker/compose/releases/download/v2.3.3/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose 3. chmod +x ~/.docker/cli-plugins/docker-compose 4. sudo chown $USER /var/run/docker.sock 5. docker compose version Note that you could install any docker-compose version. The following part of this chapter uses the old docker-compose version. If you install the up-to-date version, few following commands may slightly different, such as docker compose up -d instead of docker-compose up -d .","title":"0.3 docker-compose installation"},{"location":"start/Deployment/#04-dns-optional","text":"If you would like to deploy a TLS layer in SSE service, you must set up DNS. For instance, you will achieve a public ip address (i.e. 18.134.94.206) once you finish #0.1. Then, go to digitalocean and bind your domain name with the public ip address.","title":"0.4 DNS (Optional)"},{"location":"start/Deployment/#1-get-the-docker-compose-definition-from-the-repository","text":"git clone https://gitlab.com/asclepios-project/sse-deployment Two docker-compose files could be achieved, namely \"docker-compose-without-tls.yml\" and \"docker-compose-tls.yml\". The \"docker-compose-without-tls.yml\" file involves the definitions of the SSE server, SSE TA, SSE client, MinIO Server, and TEEP deployer server. While, the \"docker-compose-tls.yml\" file involves the definitions of the SSE server, SSE TA, SSE client, certbot, ta-proxy (Nginx), MinIO Server, and TEEP deployer server. If you do not need to use SGX for SSE TA, and/or use MinIO Server, you can customize the docker-compose file by removing teep-server and/or minio definitions. The main difference between these two files is that \"docker-compose-tls.yml\" adds a TLS layer in order to increase security level on SSE TA.","title":"1.  Get the docker-compose definition from the repository"},{"location":"start/Deployment/#2-configure-the-environmental-variables","text":"cd sse-deployment If using SGX at SSE TA: cp template_sgx.env .env If not using SGX at SSE TA: cp template_nonsgx.env .env Edit the .env file to modify the configurations and more details could be found in SSE_deployment_manual .","title":"2. Configure the environmental variables"},{"location":"start/Deployment/#21-for-speed-up-the-environmental-variables-configuration-you-can-do-the-following","text":"","title":"2.1 For speed up the environmental variables configuration, you can do the following."},{"location":"start/Deployment/#211-if-you-dont-want-to-create-a-tls-layer-for-sse-service-then-do-the-following-steps","text":"nano example-without-tls.env Then, change the following variables to your own environmental variables. TA_ALLOWED_HOSTS=\"YOUR_INSTANCE_PUBLIC_IP_ADDRESS ta\" SSE_SERVER_ALLOWED_HOSTS=\"YOUR_INSTANCE_PUBLIC_IP_ADDRESS sse\" MINIO_URL=YOUR_INSTANCE_PUBLIC_IP_ADDRESS:9000 SSE_CLIENT_ALLOWED_HOSTS=\"YOUR_INSTANCE_PUBLIC_IP_ADDRESS client\" SSE_CLIENT_TA_URL=http://YOUR_INSTANCE_PUBLIC_IP_ADDRESS:8000 SSE_CLIENT_SSE_URL=http://YOUR_INSTANCE_PUBLIC_IP_ADDRESS:8080 SSE_CLIENT_CP_ABE_URL=http://YOUR_INSTANCE_PUBLIC_IP_ADDRESS:8084 Once it's finished, execute the following command. mv example-without-tls.env .env","title":"2.1.1 If you don't want to create a TLS layer for SSE service, then do the following steps."},{"location":"start/Deployment/#212-if-you-want-to-create-a-tls-layer-for-sse-servic-do-the-following-steps","text":"nano example-with-tls.env Then, change the following variables to your own environmental variables. TA_ALLOWED_HOSTS=\"YOUR_DOMAIN_NAME ta\" SSE_SERVER_ALLOWED_HOSTS=\"YOUR_INSTANCE_PUBLIC_IP_ADDRESS sse\" SSE_SERVER_TA_SERVER=https://YOUR_DOMAIN_NAME:443 MINIO_URL=YOUR_INSTANCE_PUBLIC_IP_ADDRESS:9000 SSE_CLIENT_ALLOWED_HOSTS=\"YOUR_INSTANCE_PUBLIC_IP_ADDRESS client\" SSE_CLIENT_TA_URL=https://YOUR_DOMAIN_NAME:443 SSE_CLIENT_SSE_URL=http://YOUR_INSTANCE_PUBLIC_IP_ADDRESS:8080 SSE_CLIENT_CP_ABE_URL=http://YOUR_INSTANCE_PUBLIC_IP_ADDRESS:8084 Once it's finished, execute the following command. mv example-with-tls.env .env","title":"2.1.2 If you want to create a TLS layer for SSE servic, do the following steps."},{"location":"start/Deployment/#3-build-the-docker-images","text":"sudo docker-compose build If you just would like to deploy the SSE service, you can skip this part -\"Build the docker images\". The following part will describe how to run SSE service with \"docker-compose-without-tls.yml\" (#4.1) and \"docker-compose-tls.yml\" (#4.2) separately.","title":"3. Build the docker images"},{"location":"start/Deployment/#41-run-sse-service-with-docker-compose-without-tlsyml","text":"Rename \"docker-compose-without-tls.yml\" to \"docker-compose.yml\" mv docker-compose-without-tls.yml docker-compose.yml Then, start the SSE service. docker-compose up","title":"4.1 Run SSE service with docker-compose-without-tls.yml"},{"location":"start/Deployment/#42-run-sse-service-with-docker-compose-tlsyml","text":"","title":"4.2 Run SSE service with docker-compose-tls.yml"},{"location":"start/Deployment/#421-update-the-certbot-entry-in-docker-compose-tlsyml-with-email-and-domain","text":"First, edit \u2018docker-compose-tls.yml\u2019 with your favourite editor nano docker-compose-tls.yml Scroll down to certbot and modify the --email and -d parameters. Save the file. --email YOUR_EMAIL_ADDRESS -d YOUR_DOMAIN_NAME Rename \u2018docker-compose-tls.yml\u2019 to \u2018docker-compose.yml\u2019 mv docker-compose-tls.yml docker-compose.yml","title":"4.2.1 Update the certbot entry in \u2018docker-compose-tls.yml\u2019 with email and domain"},{"location":"start/Deployment/#422-update-the-nginxhttp-file-with-the-domain-name","text":"nano nginx.http server_name YOUR_DOMAIN_NAME Rename \u2018nginx.http\u2019 to \u2018nginx.conf\u2019 mv nginx.http nginx.conf","title":"4.2.2 Update the 'nginx.http' file with the domain name"},{"location":"start/Deployment/#423-run-the-sse-service","text":"sudo docker-compose up -d","title":"4.2.3 Run the SSE service"},{"location":"start/Deployment/#424-update-the-nginxhttps-file-with-the-domain-name","text":"nano nginx.https server_name YOUR_DOMAIN_NAME /etc/letsencrypt/live/YOUR_DOMAIN_NAME/fullchain.pem; /etc/letsencrypt/live/YOUR_DOMAIN_NAME/privkey.pem; Rename \u2018nginx.conf\u2019 to \u2018nginx.http\u2019 mv nginx.conf nginx.http Rename \u2018nginx.https\u2019 to \u2018nginx.conf\u2019 mv nginx.https nginx.conf","title":"4.2.4 Update the \u2018nginx.https\u2019 file with the domain name"},{"location":"start/Deployment/#425-restart-the-nginx-service","text":"docker-compose restart ta-proxy P.S. If you deploy all the SSE components on a single host, you will need to change SSE client port number (in docker-compose-tls.yml) from (-80:80) to (-81:80) in order to avoid port conflicts with ta-proxy container.","title":"4.2.5 Restart the Nginx service"},{"location":"start/Deployment/#deployment-sse-service-using-micado","text":"","title":"Deployment SSE service using MiCADO"},{"location":"start/Deployment/#0-preliminaries_1","text":"","title":"0. Preliminaries"},{"location":"start/Deployment/#01-micado-installation","text":"The details of MiCADO installation can be found in MiCADO installation . One additional step is required to support deployment of the SSE scheme: \u2018cert-manager.yaml\u2019 and \u2018traefik-rbac.yaml\u2019 need to be installed on the MiCADO master before the deployment. (1) SSH to MiCADO master node. (2) Copy \u2018cert-manager.yaml\u2019 and \u2018traefik-rbac.yaml\u2019 files to any directory in MiCADO master node. (3) Run the commands below. sudo kubectl apply -f cert-manager.yaml sudo kubectl apply -f traefik-rbac.yaml","title":"0.1 MiCADO installation"},{"location":"start/Deployment/#1-deployment-using-micado","text":"Four ADT templates (below) could be found in sse-deployment . Template_SSE_without_TLS_AWS.yaml Template_SSE_without_TLS_Azure.yaml Template_SSE_with_TLS_AWS.yaml Template_SSE_with_TLS_Azure.yaml The next step is to configure the ADT file and then run the command on Ansible Remote machine to deploy the SSE service (Some tutorials of how to deploy applications on MiCADO could be find in Tutorials ). For further details, you can also read about the SSE service deployment in SSE_deployment_manual . P.S. The SSE ADT examples and SSE service test reports could be found in the \"ADT examples\" folder of sse-deployment .","title":"1. Deployment using MiCADO"},{"location":"start/Implementation/","text":"SSE Implementation SSE consists of three main parties: the SSE server, the SSE Trusted Authority and a demo SSE client. In addition, MinIO server and teep-server are optional components for SSE. More specially, SSE client is a web application which uses SSE services such as uploading encrypted data, search/update/delete over the stored encrypted data. SSE server stores the encrypted data which is uploaded by the SSE client. It also provides the services such as search/update/delete over the store data. SSE Trusted Authority (SSE TA) stores the metadata which is used for generating the search/update/delete token (at the SSE client), and verifying the search/update/delete tokens on behalf of the SSE server. Apart from that, MinIO server stores encrypted binary large objects (blob), and teep-server provides SGX related services such as creating, installing SGX enclaves. These two components are optional. MinIO is only necessary when a client application wishes to support encrypting blob data and search/update/delete over its encrypted metadata. Meanwhile, teep-server is needed when we wish to enable SGX at SSE TA to increase the security level. The list below shows the details of SSE components: SSE Server SSE Trusted Authority SSE Client","title":"Implementation"},{"location":"start/Implementation/#sse-implementation","text":"SSE consists of three main parties: the SSE server, the SSE Trusted Authority and a demo SSE client. In addition, MinIO server and teep-server are optional components for SSE. More specially, SSE client is a web application which uses SSE services such as uploading encrypted data, search/update/delete over the stored encrypted data. SSE server stores the encrypted data which is uploaded by the SSE client. It also provides the services such as search/update/delete over the store data. SSE Trusted Authority (SSE TA) stores the metadata which is used for generating the search/update/delete token (at the SSE client), and verifying the search/update/delete tokens on behalf of the SSE server. Apart from that, MinIO server stores encrypted binary large objects (blob), and teep-server provides SGX related services such as creating, installing SGX enclaves. These two components are optional. MinIO is only necessary when a client application wishes to support encrypting blob data and search/update/delete over its encrypted metadata. Meanwhile, teep-server is needed when we wish to enable SGX at SSE TA to increase the security level. The list below shows the details of SSE components: SSE Server SSE Trusted Authority SSE Client","title":"SSE Implementation"},{"location":"start/Others/","text":"Other useful information Some extra helpful information for getting started could be found in a remote repository called Symmetric Searchable Encryption Manual . Such as: SSE_API_specification.pdf SSE_technical_notes","title":"Others"},{"location":"start/Others/#other-useful-information","text":"Some extra helpful information for getting started could be found in a remote repository called Symmetric Searchable Encryption Manual . Such as: SSE_API_specification.pdf SSE_technical_notes","title":"Other useful information"},{"location":"start/Testing/","text":"SSE Testing After deploying the SSE service, it's time to test SSE service. There are two ways to test it. One is manual testing and another one is automatic testing. Manual testing Open the browser and type the SSE_Client_IP_Address:Port number , you will reach a website called \"Medical Health Record\". Some figures below show the different functions in SSE service. Function 1: SEND HASHED KEY According to the figure, the shared key has been uploaded to the database. Function 2: UPLOAD DATA According to the figure above, data0.json ( { \"name\": \"white\", \"age\": 50 } ) has been submitted to the database. The details of how to write a proper json file could be reached in SSE_API_specification.pdf . Function 3: SEARCH According to the figure above, data2.json ( { \"keyword\": \"age|20\" } ) has been submitted to the database and no file (containing age=20) could be returned from the database. Function 4: UPDATE DATA According to the figure above, data4.json ( { \"name\": [\"white\",\"Peter\"] } ) has been submitted to the database and the name in data0.json has been changed from \"white\" to \"Peter\". Repeat SEARCH again According to the figure above, data5.json ( { \"keyword\": \"name|Peter\" } ) has been submitted to the database and one result could be returned from the database. (P.S. By Function 4, the database should contain one result.) Function 5: DELETE DATA According to the figure above, the file (file id = 10) has been deleted from the database. Automatic testing Jest is applied to test SSE service automatically. The details could be found in SSE_verification . Besides, the figure below shows an example of the Jest result.","title":"Testing"},{"location":"start/Testing/#sse-testing","text":"After deploying the SSE service, it's time to test SSE service. There are two ways to test it. One is manual testing and another one is automatic testing.","title":"SSE Testing"},{"location":"start/Testing/#manual-testing","text":"Open the browser and type the SSE_Client_IP_Address:Port number , you will reach a website called \"Medical Health Record\". Some figures below show the different functions in SSE service.","title":"Manual testing"},{"location":"start/Testing/#function-1-send-hashed-key","text":"According to the figure, the shared key has been uploaded to the database.","title":"Function 1: SEND HASHED KEY"},{"location":"start/Testing/#function-2-upload-data","text":"According to the figure above, data0.json ( { \"name\": \"white\", \"age\": 50 } ) has been submitted to the database. The details of how to write a proper json file could be reached in SSE_API_specification.pdf .","title":"Function 2: UPLOAD DATA"},{"location":"start/Testing/#function-3-search","text":"According to the figure above, data2.json ( { \"keyword\": \"age|20\" } ) has been submitted to the database and no file (containing age=20) could be returned from the database.","title":"Function 3: SEARCH"},{"location":"start/Testing/#function-4-update-data","text":"According to the figure above, data4.json ( { \"name\": [\"white\",\"Peter\"] } ) has been submitted to the database and the name in data0.json has been changed from \"white\" to \"Peter\".","title":"Function 4: UPDATE DATA"},{"location":"start/Testing/#repeat-search-again","text":"According to the figure above, data5.json ( { \"keyword\": \"name|Peter\" } ) has been submitted to the database and one result could be returned from the database. (P.S. By Function 4, the database should contain one result.)","title":"Repeat SEARCH again"},{"location":"start/Testing/#function-5-delete-data","text":"According to the figure above, the file (file id = 10) has been deleted from the database.","title":"Function 5: DELETE DATA"},{"location":"start/Testing/#automatic-testing","text":"Jest is applied to test SSE service automatically. The details could be found in SSE_verification . Besides, the figure below shows an example of the Jest result.","title":"Automatic testing"}]}